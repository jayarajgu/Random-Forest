# RANDOM FOREST ALGORITHM
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import pandas as pd 
df=pd.read_csv("Breast_cancer_data.csv")
# Load the dataset
X = pd.read_csv("Breast_cancer_data.csv")
y = X.pop('diagnosis')

df.isnull().any()

X.isna().any()

X.drop(['mean_perimeter','mean_area'],axis=1,inplace=True)
X = X.fillna(0)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['mean_radius']=le.fit_transform(df['mean_radius'])
df['mean_texture']=le.fit_transform(df['mean_texture'])
df


# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Build the model
model = RandomForestClassifier()
# Train the model on the training data
model.fit(X_train, y_train)
# Make predictions on the test data
y_pred = model.predict(X_test)
# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

# Predicting the test set results
Pred = model.predict(X_test)
print(Pred)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix : \n", cm)

# Plot confusion matrix
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
# confusion matrix sns heatmap 
ax = plt.axes()
df_cm = cm
sns.heatmap(df_cm, annot=True, annot_kws={"size": 30}, fmt='d',cmap="Blues", ax = ax )
ax.set_title('Confusion Matrix')
plt.show()

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
y_pred = model.predict(X_test)
y_true = y_test
precision = precision_score(y_true, y_pred)
print("Precision:", precision)

recall = recall_score(y_true, y_pred)
print("Recall:", recall)

f1_score = 2 * (precision * recall) / (precision + recall)
print(f1_score)




